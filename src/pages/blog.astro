---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

const allPosts = await getCollection('blog');
const sortedPosts = allPosts.sort((a, b) => {
  const idA = parseInt(a.data.id || a.slug);
  const idB = parseInt(b.data.id || b.slug);
  return idB - idA; // 新しい番号から順番に表示
});

// ページネーション設定
const postsPerPage = 5;
const totalPages = Math.ceil(sortedPosts.length / postsPerPage);

// 1ページ目を表示
const currentPage = 1;

// 現在のページの記事を取得
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const posts = sortedPosts.slice(startIndex, endIndex);

// ページネーション情報
const hasPrevPage = currentPage > 1;
const hasNextPage = currentPage < totalPages;
const prevPage = currentPage - 1;
const nextPage = currentPage + 1;
---

<Layout title="Blog - Paper After Word" currentPage="blog">
  <div class="back">
    <a href="/">← トップに戻る</a>
  </div>

  <div class="page-header">
    <h1>Blog</h1>
    <p>本を読んで、読んだ本を折り紙にする。</p>
  </div>

  <main class="content">
    <div class="posts">
      {posts.map((post) => (
        <article class="post">
          <div class="post-content">
            <h3><a href={`/blog/${post.data.id || post.slug}`}>{post.data.title}</a></h3>
            <div class="meta">
              {post.data.author} · {new Date(post.data.date).toLocaleDateString('ja-JP', { year: 'numeric', month: 'numeric', day: 'numeric' })}
            </div>
            <p><a href={`/blog/${post.data.id || post.slug}`}>{post.data.description}</a></p>
          </div>
          {post.data.images?.bookCover && (
            <div class="post-images">
              <a href={`/blog/${post.data.id || post.slug}`}>
                <img src={post.data.images.bookCover} alt={post.data.title} loading="lazy" decoding="async" />
              </a>
            </div>
          )}
        </article>
      ))}
    </div>

    <!-- ページネーション -->
    {totalPages > 1 && (
      <nav class="pagination">
        <div class="pagination-info">
          {currentPage} / {totalPages} ページ
        </div>

        <div class="pagination-links">
          {hasPrevPage && (
            <a href={prevPage === 1 ? "/blog" : `/blog/${prevPage}`} class="pagination-link prev">
              ← 前のページ
            </a>
          )}

          <div class="pagination-numbers">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
              <a 
                href={pageNum === 1 ? "/blog" : `/blog/${pageNum}`} 
                class={`pagination-link ${pageNum === currentPage ? 'current' : ''}`}
              >
                {pageNum}
              </a>
            ))}
          </div>

          {hasNextPage && (
            <a href={`/blog/${nextPage}`} class="pagination-link next">
              次のページ →
            </a>
          )}
        </div>
      </nav>
    )}
  </main>
</Layout>
